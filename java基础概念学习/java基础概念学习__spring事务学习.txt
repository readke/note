1、事务的传播特性
	Propagation.MANDATORY 。当前方法必须在已经定义的Transaction中运行，如果没有
		已定义的Transaction则抛出异常。
	Propagation.NESTED 。如果没有已定义的Transaction，当前方法新开一个Transaction
		并在该Transaction中运行。如果存在已定义的Transaction，当前方法在嵌套事务
		(Nested Transaction)中运行 ― 嵌套事务中可以定义储存点，因此可以独立于外
		部的Transaction而进行rollback。
	Propagation.NEVER 。当前方法不应在Transaction中运行，如果存在已经定义的
		Transaction则抛出异常。
	Propagation.NOT_SUPPORTED 。当前方法不应在Transaction中运行，如果存在已经定
		义的Transaction，则该Transaction暂停(挂起)直至该方法运行完毕。
	Propagation.REQUIRED 。 默认值 。当前方法必须在Transaction中运行。如果存在已
		经定义的Transaction，则该方法在已定义的Transaction中运行；如果不存在已经
		定义的Transaction，则该方法新开一个Transaction并在其中运行。
	Propagation.REQUIRES_NEW 。当前方法必须在新开的Transaction中运行。如果存在已
		经定义的Transaction，则该已定义的Transaction暂停直至新开的Transaction执行完毕。
	Propagation.SUPPORTS 。当前方法不需要在Transaction中运行，但如果存在已经定义
		的Transaction，则该方法也可以在Transaction中正常执行。
		
2、事务的隔离级别
	READ_UNCOMMITTED 读取未提交数据（脏读，不可重复读） 基本不使用
	READ_COMMITTED 读取已提交数据（会出现不可重复读，幻读）
		对当前数据不加锁：其他事务可以修改当前事务操作的数据，导致当前事务操作的
		数据发生变化
	REPEATABLE_READ 可重复读（会出现幻读）
		对当前数据加锁：其他事务不可以修改当前事务操作的数据，但是可以写入其他数
		据，当前事务会读到其他事务写入的数据，即幻读
	SERIALIZABLE	串行化
		事务只能序列化执行，一个事务执行完毕后才能执行下一个事务
	
	
解释： 
	脏读：一个事务读取到另一个事务未提交的更新数据
	不可重复读：在同一个事务中，多次读取的数据返回结果不同，后续读取可以读取到另
				一事务已提交的更新数据
	幻读：一个事务读到另一个事务已提交的数据
	
