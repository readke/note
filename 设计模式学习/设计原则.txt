设计原则
	1、找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在
		一起
	2、针对接口编程，而不是针对实现编程
	
	例(见策略模式.eddx)：在设计一个鸭子类的时候，将其飞行行为和叫的行为分别抽取出来，然后和鸭子类
		组合起来，实现解耦。
		
	3、多用组合，少用继承
	
	
	
	
	
	
	

	1、 策略模式：
			策略模式定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的
		变化独立于使用算法的客户。
		
	2、观察者模式：
			出版者 + 订阅者 = 观察者模式
			主题 + 观察者 = 观察者模式
			主题对象管理某些数据，当主题内的数据改变，就会通知观察者。
			观察者已经订阅(注册)主题以便在主题数据改变时能够收到更新
			
			定义：
			观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，
			它的所有依赖者都会收到通知并自动更新
			
		