前置知识：
	1、queue接口(队列)
		特点：先进先出，从队列的头部删除元素，从队列的尾部添加元素
		接口定义：
		boolean add(E e);  在尾部添加元素  如果队列满了的话，抛出IllegalStateException异常
		boolean offer(E e);	在尾部添加元素，如果队列满了的话，反回false
		E remove(); 返回头部元素，并删除，如果队列为空，抛出NoSuchElementException异常
		E poll();	返回头部元素，并删除，如果队列为空，返回null
		E element(); 仅返回头部元素，如果队列为空，抛出NoSuchElementException异常
		E peek();	仅返回头部元素，如果队列为空，返回null
	2、deque接口(栈)
		特点：先进后出，从队列的顶端添加元素，从队列的顶端删除元素
		接口定义：
		void push(E e);  入栈，从顶部添加元素，如果栈满了，抛出IllegalStateException异常
		E pop();		出栈，返回顶部的元素，并从栈中删除，如果栈为空，抛出NoSuchElementException异常
		E peek();		查看栈顶元素。如果栈为空，返回null
		
	3、deque接口(双端队列)
		特点：两端都可以添加和删除元素
		接口定义：
		void addFirst(E e);	   在头部添加元素，如果队列满了的话，抛出IllegalStateException异常
		void addLast(E e);		在尾部添加元素，如果队列满了的话，抛出IllegalStateException异常
		E getFirst();	取出头部元素，如果队列为空的话，抛出NoSuchElementException异常
		E getLast(E e);	取出尾部元素，如果队列为空的话，抛出NoSuchElementException异常
		boolean offerFirst(E e);	在头部添加元素，如果队列满了的话，返回false	
		boolean offerLast(E e);		在尾部添加元素，如果队列满了的话，返回false
		E peekFirst();	返回头部元素，如果队列为空，返回null
		E peekLast();	返回尾部元素，如果队列为空，返回null
		E pollFirst();	返回头部元素，并删除，如果队列为空，返回null
		E pollLast();	支架尾部元素，并删除，如果队列为空，返回null
		E removeFirst(); 返回头部元素，并删除，如果队列为空，抛出NoSuchElementException异常
		E removeLast();		返回尾部元素，并删除，如果队列为空，抛出NoSuchElementException异常
1、linkedList 特点
	说明：插入和删除数据效率很高，访问数据的效率很低
	实现原理：  
		内部使用双向链表来实现的，为了表示一链接关系，需要一个节点为的概念。节点
		包括实际的元素、指向前一个节点为的链接、指向后一个节点的链接。节点是一个
		内部类。
		private static class Node<E>{
			E item;
			Node<E> prev;
			Node<E> next;
			
			Node(Node<E> prev,E element,Node<E> next){
				this.item = element;
				this.prev = prev;
				this.next = next;
			}
		}
	
	linkedList内部组成就是如下三个实例变量：
		transient int size = 0;		size 表示链表的长度
		transient Node<E> first;	first 指向链表的头节点；
		transient Node<E> last;		last 指向链表的尾节点；
		
2、linkedList 操作头尾节点的核心方法
	1) void linkFirst(E e)
	2) void linkLast(E e)
	3) Node<E> node(int)
	4) void linkBefore(E e)
	5) E unlink(Node<E> node)
	6) E unlinkFirst(Node<E> node)
	7) E unlinkLast(Node<E> node)
	
	linkFirst(E e)
	说明：
		向头部添加一个节点
	实现思路：
		创建一个新节点，将新节点的prev置为null，将新节点的next指向原头节点，将原
		头节点的prev节点指向新节点，链表长度+1
	实现步骤：
		1) 获取链表当前头节点
		2) 创建一个新节点，新节点的前一个节点为空，下一个节点为前头节点
		3) 让头节点指向新节点
		4) 判断前头节点是否为空，如果为空(链表为空)，尾节点指向新节点，如果不为
		   空，前头节点的前一节点指向头节点
		5) 链表长度+1，改变次数+1
	重要细节：
		1) 判断链表是否是空链表，如果是空链表，头节点、尾节点都为新增的节点
	
	linkLast(E e) 
	说明：
		向尾部添加一个节点
	实现思路：
		创建一个新节点，将新节点的prev指向原尾结点，将新节点的next置为null，将原
		尾结点的next指向新节点，链表长度+1
	实现步骤：
		1) 获取链表当前尾节点对象；
		2) 创建一个新节点,新节点的前一个节点为当前尾节点,新节点的后一个节点为null；
		3) 尾节点指向新节点；
		4) 判断前尾节点是否为空，如果为空(链表为空)，头节点指向新节点；如果不为
		    空，前尾节点对象的下一个节点指向新的尾节点
		5) 链表长度+1，改变次数+1
	重要细节：
		1) 判断链表是否是空链表，如果是空链表，头节点、尾节点都为新增的节点
		
	Node<E> node(int i)
	说明：
		查找指定索引处的节点
	实现思路：
		从链表头部或者尾部遍历，取出链表索引==指定索引的节点
	实现步骤：
		1) 判断索引在链表的前半部分还是在后半部分(使用二分法比较)
		2) 如果在前半部分，从链表头部开始查找
		3) 如果在后半部分，从链表的尾部开始查找
		4) 返回查找的节点的item对象
		
	E unlink(Node<E> node)
	说明：
		将指定节点从链表中删除
	实现思路：
		获取指定节点的前节点、后节点，前节点的next指向后节点，后节
		点的prev指向前节点，返回指定的节点
	实现步骤：
		1) 获取指定节点的前节点
		2) 获取指定节点的后节点
		3) 判断前节点是否为null，如果为null，则指定节点为头节点，头节点的next指向
			next;如果不为null，指定节点不为头节点，则后节点的prev指向前节点，指定
			节点的prev置为null(避免内存泄漏)
		4) 判断后节点是否为null，如果为null，前节点的next置为null;如果不为null，
		   前节点的next指向后节点，指定节点的next置为null(避免内存泄漏)
		5) 获取当前节点的item对象，然后将当前节点的item值置为null(避免内存泄漏)
		6) 链表长度-1,改变次数+1
	重要细节：
		1) 判断指定节点是否是头节点或者尾节点。如果指定节点为头节点，则链表的头节
		   点更新为指定节点的后一个节点；如果指定节点为尾节点，则链表的尾节点更新
		   为指定节点的前一个节点
		2) 把当前的prev,next,item设置为null,为了防止发生内存泄漏
		
	